name: 'Terraform'

on:
  push:
    branches: 
      - main
  pull_request: 
    branches:
      - main

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.2.0'  # Specify your Terraform version here
    
    - name: Configure Google Cloud credentials
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: "build-docker-image"
      uses: "./cloud_functions/image_handler/Dockerfile"
      args: ["build", "-t", "${_REPO_REGION}.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/&{_IMAGE_NAME}:&{_IMAGE_TAG}", "./cloud_functions/image_handler/Dockerfile"]

    - name: "push-docker-image"
      run: ["push", "${_REPO_REGION}.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/&{_IMAGE_NAME}:&{_IMAGE_TAG}"]
      waitFor: ["build-docker-image"]

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

substitutions:
  _REPO_NAME: "cloud-functions-source-deploy"
  _PROJECT_ID: secrets.GCP_PROJECT_ID
  _REPO_REGION: "europe-west3"
  _IMAGE_NAME: "image-handler"
  _IMAGE_TAG: "version_1"